---
- name: Postgres Client
  ansible.builtin.import_tasks: pg_client.yml
  become: true
  when: docker_postgres_install_client

- name: Postgres Unix Group
  ansible.builtin.group:
    gid: 999
    name: postgres
    system: true
  become: true

- name: Template Docker Compose
  ansible.builtin.template:
    src: docker-compose.yml
    dest: /tmp/docker-compose.yml
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Postgres Config Dir
  ansible.builtin.file:
    path: /etc/postgresql
    state: directory
    mode: "1755"
    owner: "{{ ansible_user }}"
    group: postgres
  become: true

- name: Template Postgres Config
  ansible.builtin.template:
    src: postgresql.conf
    dest: /etc/postgresql/postgresql.conf
    owner: "{{ ansible_user }}"
    group: postgres
    mode: '0440'
  become: true

- name: Postgres Docker Container
  community.docker.docker_container:
    image: "{{ docker_postgres_image }}"
    name: postgres
    restart_policy: always
    volumes:
      - /var/lib/postgresql/data:/var/lib/postgresql/data:rw
      - /etc/postgresql:/etc/postgresql:ro
    command: ["-c", "config_file=/etc/postgresql/postgresql.conf"]
    env:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - 127.0.0.1:5432:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready', '-d', 'postgres']
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 0s
    networks:
      - name: "{{ docker_postgres_network }}"
  register: _docker_postgres_container

- name: Check Init password
  community.postgresql.postgresql_ping:
    login_host: localhost
    login_user: postgres
    login_password: postgres
  register: _docker_postgres_ping
  retries: 5
  delay: 5
  until: _docker_postgres_ping.is_available
  ignore_errors: "{{ 'password authentication failed' in _docker_postgres_ping.conn_err_msg }}"

- name: Postgres Root Password
  community.postgresql.postgresql_user:
    name: postgres
    password: "{{ docker_postgres_password }}"
    login_host: localhost
    login_user: postgres
    login_password: postgres
  when: _docker_postgres_container.changed and 'password authentication failed' in _docker_postgres_ping.conn_err_msg


- name: Postgres Exporter Init Script
  ansible.builtin.template:
    src: init.sql
    dest: /etc/postgresql/init.sql
    owner: "{{ ansible_user }}"
    group: postgres
    mode: '0440'
  become: true
  when: docker_postgres_exporter_enabled

- name: Postgres Exporter Init
  community.postgresql.postgresql_script:
    path: /etc/postgresql/init.sql
    login_host: localhost
    login_user: postgres
    login_password: "{{ docker_postgres_password }}"
  when: docker_postgres_exporter_enabled
  retries: 5
  delay: 5

- name: Pgadmin Config DB
  ansible.builtin.import_tasks: pg_db.yml
  vars:
    docker_postgres_db_name: pgadmin
    docker_postgres_db_password: "{{ docker_postgres_pgadmin_db_password }}"
  when: docker_postgres_pgadmin_enabled

- name: Pgadmin Config Dir
  ansible.builtin.file:
    path: /etc/pgadmin
    state: directory
    mode: "1775"
    owner: 5050  # pgadmin uid
    group: postgres
  become: true
  when: docker_postgres_pgadmin_enabled

- name: Template Pgadmin Servers
  ansible.builtin.copy:
    content: "{{ _docker_postgres_pgadmin_servers_json }}"
    dest: /etc/pgadmin/servers.json
    mode: "660"
    owner: 5050  # pgadmin uid
    group: postgres
  become: true
  when: docker_postgres_pgadmin_enabled

- name: Template Pgadmin Servers
  ansible.builtin.copy:
    content: |
      postgres:5432:*:postgres:{{ docker_postgres_password }}
      postgres:5432:pgadmin:pgadmin:{{ docker_postgres_pgadmin_db_password }}
    dest: /etc/pgadmin/.pgpassfile
    mode: "600"
    owner: 5050  # pgadmin uid
    group: postgres
  become: true
  when: docker_postgres_pgadmin_enabled

- name: Run Docker Compose
  community.docker.docker_compose_v2:
    project_name: "{{ docker_postgres_project }}"
    project_src: /tmp
  environment: 
    EXPORTER_DATA_SOURCE_NAME: "{{ _docker_postgres_server_exporter_datasource }}"
    PGADMIN_DEFAULT_EMAIL: "{{ docker_postgres_pgadmin_user_email }}"
    PGADMIN_DEFAULT_PASSWORD: "{{ docker_postgres_pgadmin_user_password }}"
    PGADMIN_CONFIG_CONFIG_DATABASE_URI: "\"{{ _docker_postgres_server_pgadmin_datasource }}\""
